name: Build, Test, and Deploy LingoLizard to Azure

on:
  push:
    branches:
      - IterationThree
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set Up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'  # Enable pip caching

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          python -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt
          pip install pytest pytest-asyncio

      # Optional Test Step â€“ Uncomment when ready
      # - name: Run Tests
      #   run: |
      #     source venv/bin/activate
      #     pytest bot/tests --maxfail=3 --disable-warnings
      #     echo "Tests completed successfully"

      - name: Verify Environment
        run: |
          echo "Python environment verification:"
          python --version
          echo "Dependencies installed successfully"

  build:
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker Image
        run: |
          docker build -t mjc136/lingolizard:latest . || exit 1

      - name: Push Docker Image
        run: |
          docker push mjc136/lingolizard:latest || exit 1

  deploy:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Log in to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Configure Web App Settings
        run: |
          # Set needed environment variables
          az webapp config appsettings set \
            --name LingoLizardDev \
            --resource-group LingoLizard-Dev \
            --settings \
              WEBSITES_PORT=8080 \
              FLASK_PORT=5000 \
              PORT=8000 \
              BOT_URL="https://lingolizarddev.azurewebsites.net/api/messages" \
              BYPASS_AUTH="false" \
              WEBSITE_HTTPLOGGING_RETENTION_DAYS=3

      - name: Deploy to Azure Web App
        run: |
          az webapp config container set \
            --name LingoLizardDev \
            --resource-group LingoLizard-Dev \
            --docker-custom-image-name mjc136/lingolizard:latest \
            --docker-registry-server-url https://index.docker.io/v1/ || exit 1

      - name: Restart Azure Web App
        run: |
          az webapp restart \
            --name LingoLizardDev \
            --resource-group LingoLizard-Dev || exit 1

      - name: Wait for deployment to settle
        run: |
          echo "Waiting for deployment to stabilize..."
          sleep 60

      - name: Comprehensive Health Check
        run: |
          echo "Performing health checks..."
          
          # Check web app status first
          webapp_status=$(az webapp show --name LingoLizardDev --resource-group LingoLizard-Dev --query state -o tsv)
          if [ "$webapp_status" != "Running" ]; then
            echo "Web app is not in Running state. Current state: $webapp_status"
            exit 1
          fi
          
          # Check Flask app health
          for i in {1..6}; do
            echo "Checking Flask app health ($i/6)..."
            status_code=$(curl -o /dev/null -s -w "%{http_code}" https://lingolizarddev.azurewebsites.net/health)
            if [ "$status_code" -eq 200 ]; then
              echo "Flask health check passed!"
              break
            fi
            if [ $i -eq 6 ]; then
              echo "Flask health check failed after 6 attempts!"
              exit 1
            fi
            echo "Retrying in 20 seconds..."
            sleep 20
          done
          
          # Check Bot service health if applicable
          for i in {1..3}; do
            echo "Checking Bot service health ($i/3)..."
            status_code=$(curl -o /dev/null -s -w "%{http_code}" https://lingolizarddev.azurewebsites.net/api/health)
            if [ "$status_code" -eq 200 ]; then
              echo "Bot health check passed!"
              break
            fi
            if [ $i -eq 3 ]; then
              echo "Bot health check warning - continuing deployment"
            fi
            echo "Retrying in 10 seconds..."
            sleep 10
          done
          
          echo "Deployment health verification completed successfully"
