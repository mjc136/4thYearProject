# Stage 1: Builder
FROM python:3.10-slim-buster AS builder

WORKDIR /app

# Install build dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    gcc \
    libpq-dev \
    python3-dev \
    libffi-dev \
    build-essential \
    git \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements file
COPY requirements.txt .

# Install Python packages in batches to better handle errors
RUN pip install --no-cache-dir --upgrade pip setuptools wheel && \
    pip install --no-cache-dir --prefix=/install -r requirements.txt || \
    (echo "Full requirements installation failed, trying with core dependencies only" && \
     pip install --no-cache-dir --prefix=/install \
        aiohttp \
        botbuilder-core \
        botbuilder-dialogs \
        botbuilder-integration-aiohttp \
        botbuilder-schema \
        azure-ai-textanalytics \
        python-dotenv \
        sqlalchemy)

# Stage 2: Final container
FROM python:3.10-slim-buster

WORKDIR /app

# Install runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    libpq5 \
    && rm -rf /var/lib/apt/lists/*

# Create dedicated user
RUN useradd -m appuser

# Set up directories
RUN mkdir -p /app/backend \
    && chown -R appuser:appuser /app

# Copy installed packages from builder
COPY --from=builder /install /usr/local

# Copy Bot app code
COPY app_bot.py .
COPY backend/bot/ ./backend/bot/
COPY backend/common/ ./backend/common/
COPY backend/models.py ./backend/
COPY backend/__init__.py ./backend/

# Create startup script
RUN echo '#!/bin/bash\n\
# Determine PORT from environment\n\
PORT=${PORT:-3978}\n\
\n\
echo "Starting bot application on port $PORT"\n\
\n\
# Start the application\n\
exec python app_bot.py\n' > /app/start.sh

RUN chmod +x /app/start.sh
RUN chown -R appuser:appuser /app

# Switch to non-root user
USER appuser

EXPOSE 3978

# Use the startup script
CMD ["/app/start.sh"]